<div id="comments-list">    <!-- 1. 댓글 목록 영역 설정 -->
    {{#commentsDtos}}       <!-- 2. 댓글 목록 순회 -->
        <div class="card m-3" id="card-header">   <!-- 3. 댓글 카드 만들고 id 부여 -->
            <div class="card-header">
                {{nickname}}    <!-- 1) 닉네임 보여주기 -->
                <!-- Button trigger modal           붙여 넣기 & 코드 정리-->
                <button type="button"
                        class="btn btn-sm btn-outline-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#comment-edit-Modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-article-id="{{articleId}}">수정</button>      <!-- 제목 변경 -->
                        <!-- 댓글 id 저장
                             댓글의 nickname 저장
                             댓글의 body 저장
                             보모 게시글의 id 저장 .추가.-->
                <!-- 댓글 삭제 버튼 -->
                <button type="button"
                        class="btn btn-sm btn-outline-danger comment-delete-btn"
                        data-comment-id="{{id}}">삭제</button>
            </div>     <!-- 4. 댓글 헤더 영역 설정 -->
            <div class="card-body">
                {{body}}        <!-- 2)댓글 본문 보여주기 -->
            </div>       <!-- 5. 댓글 본문 영역 설정 -->
        </div>
    {{/commentsDtos}}
<!-- Modal -->
<div class="modal fade" id="comment-edit-Modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <!-- 닉네임 입력 -->
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>   <!-- 닉네임 입력 폼 만들기 -->
                        <input type="text" class="form-control" id="edit-comment-nickname">
                    </div>
                    <!-- 댓글 본문 입력 -->
                    <div class="mb-3">
                        <label class="form-label">댓글 내용</label>   <!-- 댓글 본문 입력 폼 만들기 -->
                        <textarea type="text" class="form-control" row="3"
                                  id="edit-comment-body"></textarea>
                    </div>
                    <div>
                    <!-- 히든 인풋 -->
                        <input type="hidden" id="edit-comment-id">
                        <input type="hidden" id="edit-comment-article-id">
                    </div>
                    <!-- 전송 버튼 -->
                        <button type="button" class="btn btn-primary"
                            id="comment-update-btn">수정 완료</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- 모달 이벤트 처리 -->
<script>
    {
        // 모달 요소 선택
        /*
        show.bs.modal       모달이 표시되기 직전 실행되는 이벤트
        shown.bs.modal      모달이 표시된 후 실행되는 이벤트
        hide.bs.modal       모달이 숨겨지기 직전 실행되는 이벤트
        hidden.bs.modal     모달이 숨겨진 후 실행되는 이벤트
        */
        const commentEditModal = document.querySelector("#comment-edit-Modal");
            commentEditModal.addEventListener("show.bs.modal", function(event) {
                // 1. 트리거 버튼 선택
                const triggerBtn = event.relatedTarget;     // show.bs.modal 이벤트에서 event.target은 모달이 되고,
                                                            // event.relatedTarget은 트리거 버튼이 됨(이벤트의 주최가 모달이기 때문)
                // 2. 데이터 가져오기
                const id = triggerBtn.getAttribute("data-bs-id");   // 1. id 가져오기
                const nickname = triggerBtn.getAttribute("data-bs-nickname");   // 2. nickname 가져오기
                const body = triggerBtn.getAttribute("data-bs-body");   // 3. body 가져오기
                const articleId = triggerBtn.getAttribute("data-bs-article-id");    // 4. 부모 id 가져오기
                // 3. 수정 폼에 데이터 반영
                document.querySelector("#edit-comment-nickname").value = nickname;      // 1. 닉네임 반영
                document.querySelector("#edit-comment-body").value = body;              // 2. 본문 반영
                document.querySelector("#edit-comment-id").value = id;                  // 3. id 반영
                document.querySelector("#edit-comment-article-id").value = articleId;   // 4. 부모 id 반영
            });
    }
    {
        // 수정 완료 버튼 선택
        const commentUpdateBtn = document.querySelector("#comment-update-btn");
        // 클릭 이벤트 처리
        commentUpdateBtn.addEventListener("click", function(){
           //수정 댓글 객체 생성
           const comment = {    // 1. 객체 변수 선언
               id: document.querySelector("#edit-comment-id").value,
               nickname: document.querySelector("#edit-comment-nickname").value,
               body: document.querySelector("#edit-comment-body").value,
               articleId: document.querySelector("#edit-comment-article-id").value
           };
           console.log(comment);    // 2. 객체 생성 확인
           // 수정 REST API 호출
           const url = "/api/comments/" + comment.id;
           fetch(url, {
               method: "PATCH", //PATCH 요청
               headers: {       //전송 데이터 타입(JSON) 정보
                   "Content-Type": "application/json"
               },
               body: JSON.stringify(comment)    //comment 객체를 JSON 문자열로 변환 전송
           }).then(response => {
               //HTTP 응답 코드에 따른 메시지 출력
               const msg = (response.ok) ? "댓글이 수정되었습니다." : "댓글 수정 실패";     // 1. 응답 처리
               alert(msg);
               //현재 페이지 새로고침
               window.location.reload();    // 2. 새로 고침
           });
        });
    }
</script>
<!--  댓글 삭제  -->
<script>
{

    // 삭제 버튼 선택
    const commentDeleteBtn = document.querySelectorAll(".comment-delete-btn");
/*
    // 삭제 버튼 이벤트 처리
    commentDeleteBtn.addEventListener("click", function (){
       console.log("삭제 버튼이 클릭되었습니다.")
    });
*/
    commentDeleteBtn.forEach(btn => {               // 삭제 버튼 수 만큼 반복
        btn.addEventListener("click", (event) => {       // 각 버튼의 이벤트 처리 (evert) 객체 받아오기
            // 이벤트 발생 요소 선택
            const commentDeleteBtn = event.target;  //삭제 버튼 변수화
            // 삭제 댓글 id 가져오기
            const commentId = commentDeleteBtn.getAttribute("data-comment-id"); // id 가져오기
            console.log(`삭제 버튼 클릭: ${commentId}번 댓글`);  // 콘솔 로그 출력
            // 삭제 REST API 호출
            const url = `/api/comments/${commentId}`;
            fetch(url, {
                method: "DELETE"
            }).then(response => {
                //댓글 삭제 실패 처리
                if (!response.ok){
                    alert("댓글 삭제 실패")
                    return;
                }
                //삭제 성공 시 메시지 창 띄우기
                const msg = `${commentId}번 댓글을 삭제했습니다`;
                alert(msg);
                //현재 페이지 새로 고침
                window.location.reload();
            });
        });
    });
}
</script>
</div>
<!--
화살표 함수

화살표 함수는 function 키워드 대신 화살표 => 를 사용해 함수를 정의하는 방법

btn.addEventListener("click, => { ... });    //화살표 함수 사용
btn.addEventListener("click, function () => { ... });   // 일반 함수 사용

매개변수의 개수에 따라 화살표 함수의 사용 형식

() => { ... }  매개변수가 없는 경우
x => { ... } 또는 (x) => { ... } 매개변수가 1개인 경우
(x, y) => { ... } 매개변수가 여러 개인 경우


백틱 (`)

백틱은 문자열을 정의하는 방법

`삭제 버튼 클릭: ${commentId}번 댓글`    // 백틱 문자열에 변수 삽입
    << 위 아래 같은 의미 >>
"삭제 버튼 클릭: " + commentId + "번 댓글   // 큰 따옴표 문자열을 덧셈 연결
-->
