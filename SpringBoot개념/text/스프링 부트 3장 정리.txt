학습 목표

	스프링 부트3의 구조

	어떤 과정을 통해서 실행되는지
	
핵심 키워드

	프레젠테이션 계층
	비즈니스 계층
	퍼시스턴스 계층

3.0 그림으로 이해하는 프로젝트

	교재를 보면 웹 브라우저의 요청이 있고,
	이 요청을 TestController 클래스에서 받아 분기 처리 후 TestService 클래스에 다음 작업을 요청
	
	TestController 클래스는 어떤 요청인지 판단하고
	TestService 클래스는 그 요청에 맞는 작업을 실행함

	Member 클래스, MemberRepository 클래스는 데이터베이스를 위한 클래스

	Member 클래스로 구현한 클래스를 MemberRepository 클래스가 실제 테이블과 연결함



3,1 스프링 부트 3 구조 살펴보기

	각 계층의 양 옆의 계층과 통신하는 구조를 따름
	
	계층이란?
		각자의 역할과 책임이 있는 어떤 소프트웨어의 구성 요소를 의미함

	각 계층은 서로 소통할 수는 있지만 다른 계층에 직접 간섭하거나 영향을 미치지 않음

** 카페와 빵집으로 이해하는 계층

	카페와 빵집이 있다고 가정

	카페는 커피를

	빵집은 빵을

	그런데 필요한 경우 협업 관계를 맺어 어떤 손님이 커피를 사면 빵을 할인해줄 수도 있음

	이것이 계층 간의 소통

	하지만 빵집 알바생이 빵을 팔다 말고 카페에 가서 커피를 팔 수 는 없음

	계층은 서로 영향을 끼치지 못한다는 의미

	이렇게 각 계층은 자신의 책임에 맞는 역할을 수행하며,

	필요에 따라 소통을 함

	스트링 부트에는 프레젠테이션, 비즈니스, 퍼시스턴스 계층이 있음

	이 계층이[ 서로 통신하며 프로그램을 구성함


	컨트롤러		서비스		리포지터리	

	프레젠테이션 계층	비즈니스 계층	퍼시스턴스 계층	< ---- > 데이터 베이스


** 프레젠테이션 계층

	HTTP 요청을 받고 이 요청을 비즈니스 계층으로 전송하는 역할

	( 컨트롤러 가 프레젠테이션 계층 역할 )

	컨트롤러는 앞서 TestController 클래스와 같은 것을 말함

	** 컨트롤러는 스프링 부트 내에 여러 개가 있을 수 있음

** 비즈니스 계층

	모든 비즈니스 로직을 처리함
	

	비즈니스 로직이란?
		서비스를 만들기 위한 로직을 말함
		쉽게 말해 웹사이트에서 벌어지는 모든 작업, 
		주문 서비스라고 한다면 
		주문 개수, 가격 등의 데이터를 처리하기 위한 로직,
		주문 처리를 하다가 발생하는 예외 처리 로직,
		주문을 받거나 취소하는 것 같이 프로세스를 구현하기 위한 로직 등을 생각하면 됨.

		** 서비스가 비즈니스 계층의 역할

** 퍼시스턴스 계층

	모든 데이터베이스 관련 로직을 처리

	이 과정에서 데이터베이스에 접근하는 DAO 객체를 사용할 수도 있음

	DAO는 데이터베이스 계층과 상호작용하기 위한 객체라고 이해하기

	** 리포지토리가 퍼시스턴스 계층의 역할

	<< 계층은 개념의 영역이고, 컨트롤러, 서비스, 리포지토리는 실제 구현을 위한 영역 >>

** 스프링 부트 프로젝트 디렉토리 구성 살펴보기

	스프링 부트에는 정해진 프로젝트 구조가 없지만 추천 프로젝트 구조는 있음

	많은 개발자가 이 구조를 따르므로 이 구조를 따라 개발하기

	main
		실제 코드를 작성하는 공간
		프로젝트 실행에 필요한 소스 코드나 리소스 파일은 모두 이 폴더 안에 들어 있음

	test
		프로젝트의 소스 코드를 테스트할 목적의 코드나 리소스 파일이 들어 있음
	
	build.gradle
		빌드를 설장하는 파일
		의존성이나 플러그인 설정 등과 같이 빌드에 필요한 설정을 할 때 사용

	settings.gradle
		빌드할 프로젝트의 정보를 설정하는 파일
	
** main 디렉토리 구성하기

	main 디렉토리를 펼치면 java와 resources 로 구성되어 있음
	
	01단계) HTML과 같은 뷰 관련 파일을 넣을 templates 디렉토리 생성
		resources 디렉토리를 우클릭 후 [New -> Directory] templates 디렉토리를 만들기

	02단계) static 디렉토리는 JS, CSS, 이미지와 같은 정적 파일을 넣는 용도로 사용

	03단계) 스프링 부트 설정을 할 수 있는 application.yml 파일을 생성
		이 파일은 스프링 부트 서버가 실행되면 자동으로 로딩되는 파일
		데이터베이스의 설정 정보, 로깅 설정 정보 등이 들어갈 수도 있고,
		직접 설정을 정의할 때 사용하기도 함
	

3.2 스프링 부트 3 프로젝트 발전시키기

	계층이 무엇이고 스프링 부트에서는 계층을 어떻게 나누는지
	의존성을 추가한 다음에 프레젠테이션 계층, 비즈니스 계층, 퍼시스턴스 계층 순서대로 코드를 추가

** build.gradle에 의존성 추가하기

	01단계) build.gradle에 필요한 의존성을 추가
		스프링 부트용 JPA인 스프링 데이터 JPA,
		로컬 환경과 테스트 환경에서 사용할 인메모리 데이터베이스인 H2,
		반복 메소드 작성 작업을 줄여주는 라이브러리인 롬복을 추가

	//    스프링 데이터 JPA
	    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
   	    runtimeOnly 'com.h2database:h2' //인메모리 데이터베이스
    	    compileOnly 'org.projectlombok:lombok'  // 롬복
    	    annotationProcessor 'org.projectlombok:lombok'

	<< 데이터베이스의 테이블을 객체로 바꿔서 가져오게 하는 도구들 >>

	구성은 implementation, testImplemetation, runtimeOnly, compileOnly, annotationProcessor

	자바의 gradle 플러그인에서 의존성을 추가할 때 사용하는 키워드
	
	각 키워드마다 의존성을 어떻게 관리할지 정하는 것

	** 키워드의 역할
		implementation
			프로젝트 코드가 컴파일 시점과 런타임에 모두 해당 라이브러리를 필요로 할 때 사용
		
		testImplementation
			프로젝트의 테스트 코드를 컴파일하고 실행할 때만 필요한 의존성을 설정,
			테스트 코드에서만 사용,
			매인 어플리케이션 코드에서는 사용하지 않음
		
		runtimeOnly
			런타임에만 필요한 의존성을 지정,
			컴파일 시에는 필요하지 않지만,
			어플리케이션을 실행할 때 필요한 라이브러리 설정

		compileOnly
			컴파일 시에만 필요,
			런타임에는 포함되지 않아야 하는 의존성 지정

		annotationProcessor
			컴파일 시에 어노테이션을 처리할 때 사용하는 도구의 의존성 지정

	02단계) 오른쪽에 [Gradle] 탭에서 새로고침 버튼을 누르면 앞서 추가한 의조넝을 다운로드 할 수 있음
		
** 프로젠테이션 , 서비스, 퍼시스턴스 계층 만들기

	01단계) 프로젠테이션 계층에 속하는 컨트롤러 관련 코드를 작성

//프레젠테이션 계층에 속하는 컨트롤러
@RestController
public class TestController {
    @Autowired  //  TestService 빈 주입
    TestService testService;
    @GetMapping("/test")
    public List<Member> getAllMembers() {
        List<Member> members = testService.getAllmembers();
        return members;
//    public String test(){           // /test GET 요청이 오면 test() 메소드 실행
//        return "Hello World!!";
    }
}

	02단계) 비즈니스 계층 코드 작성
 	
// 비즈니스 계층
@Service
public class TestService {

    @Autowired
    MemberRepository memberRepository;  // 1) 빈 주입

    public List<Member> getAllmembers() {
        return memberRepository.findAll();  // 멤버 목록 얻기
        /*
            MemberRepository라는 빈을 주입받은 후에 findAll() 메소드를 호출
			 -> 멤버 테이블에 저장된 멤버 목록을 모두 가져옴

            HTTP 요청
            --------------->   TestController.java  <------------> TestService.java
            url:/test            프레젠테이션 계층                      비즈니스 계층
        */
    }
}

	03단계) 퍼시스턴트 계층 코드 작성

// 퍼시스턴트 계층     DB에 접근할 때 사용할 객체인 Member DAO 를 생성하고 실제 DB에 접근하는 코드 작성
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Entity
public class Member {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", updatable = false)
    private Long id;    // DB 테이블의 'id' 칼럼과 매칭

    @Column(name = "name", nullable = false)
    private String name;    // DB 테이블의 'name' 컬럼과 매칭

    /*
        member라는 이름의 테이블에 접근하는데 사용할 객체
    */
}


	04단계) 매핑 작업에 필요한 인터페이스 파일 생성

/*
    매핑 작업에는 인터페이스 파일이 필요함
    DB에서 데이터를 가져오는 " 퍼시스턴트 " 계층 역할
*/

@Repository
public interface MemberRepository extends JpaRepository<Member, Long> {

}

** 작동 확인하기
	아직은 데이터베이스에 결과물을 볼 수 있는 데이터가 하나도 입력되지 않은 상태
	보통은 이런 실행 테스트를 하기 위해 애플리케이션을 실행할 때 마다 
	SQL 문을 실행해 데이터 베이스에 직접 데이터를 넣음
	
	인메모리 데이터베이스를 사용하고 있기 때문에
	애플리케이션을 새로 실행할 때마다 데이터가 사라져 불편

	이를 해결하기위해
	어플리케이션을 실행할 때 원하는 데이터를 자동으로 넣는 작업

	01단계)
		어플리케이션이 실행될 때 저장할 더미 데이터를 SQL 파일을 생성
		resources 디렉토리에 data.sql 파일을 생성하고 코드 작성

	INSERT INTO member(id, name) VALUES(1, 'name_1')
	INSERT INTO member(id, name) VALUES(2, 'name_2')
	INSERT INTO member(id, name) VALUES(3, 'name_3')
	
	02단계)
		application.yml 파일을 열어 코드 변경
		
	spring:
  	   jpa:
    	       # 전송 쿼리 확인
    	       show-sql: true
                   properties:
                      hibernate:
                        format_sql:true
      
                   # 테이블 생성 후에 data.sql 실행
                   defer-datasource-initialization: true

	show-sql, format_sql 
	옵션은 애플리케이션 실행 과정에 데이터베이스에 쿼리할 일이 있으면실행 구문을 모두 보여주는 옵션
	
	defer-datasource-initialization
	옵션은 애플리케이션을 실행할 때 테이블을 생성하고 data.sql 파일에 있는 쿼리를 실행하도록 하는 옵션

	** 
		스프링 부트는 처음 많이 실수하는 것은 들여쓰기
	
		YAML은 들여쓰기를 사용하여 계층 구조를 나타냄.
		
		들여쓰기는 일관되어야 함

		만약, properties가 jpa와 같은 들여쓰기 레벨에 있거나
		format_sql이 hibernate와 같은 들여쓰기 레벨에 있으면
		계층 구조가 바뀌어 원하는 설정이 적용되지 않을 수 있고,
		오류가 발생할 수 있음

		들여쓰기에 유의하여 YAML 파일을 작성해야함!!
				

				spring

				jpa

show-sql: true			properties	defer-datasourece	
						initialization: true
				hibernate

				format_sql: true

	03단계) 서버 실행 후 ctrl + F 를 누르고 CREATE TABLE을 검색해 테이블이 잘 만들어 졌는지 확인

	04단계) 포스트맨으로 HTTP 요청 시도
		포스트맨을 켜고 HTTP 메소드를 [GET]으로, URL에 http://localhost:8080/test 를 입력

		[Send] 버튼을 눌러 스프링 부트 서버에 HTTP 요청하기

		data.sql 파일로 작성해 저장한 데이터를 포스트맨, 즉, 클라이언트에서 확인 할 수 있음

** 포스트맨에서 데이터를 보기까지의 과정

	HTTP 요청	TestController.java		TestService.java		MemberRepository.java
	---------------->			<-------->		<-------->			<-----> 데이터베이스
	urel: /test	프레젠테이션 계층		비즈니스 계층		퍼시스턴스 계층


3.3 스프링 부트 요청-응답 과정 한 방에 해결하기

	스프링 부트로 만든 어플리케이션에서 HTTP 요청이 오면 어떤 과정을 거치며 실행되고 응답하는지 알아보기

	스프링 부트의 전체적인 실행 과정이 어떻게 진행되는지 이해해야 스프링 부트로 어플리케이션을 만들었을 때

	어떤 흐름으로 요청이 처리되는지 알 수 있고, 추후에 문제가 발생했을 때에도 빠르게 파악할 수 있음

					스프링
	포스트맨	     ---------->	1) 디스패처 서블릿	
	    OR		 	2) TestController
	브라우저	   <--4)데이터--	3) 뷰 리졸버

	1) 포스트맨에서 톰캣에 /test GET 요청
		요청은 스프링 부트 내로 이동
			스프링 부트의 디스패처 서블릿이 URL을 분석
				요청을 처리할 수 있는 컨트롤러를 찾음
					TestController가 /test라는 패스에 대한 GET 요청을 처리할 수 있는 
					getAllMembers() 메소드를 가지고 있으므로
					디스패처 서블릿은 TestController에게 /test GET 요청을 전달함

	2) /test GET 요청을 처리할 수 있는 getAllMember() 메소드와 이 요청이 매치됨
		getAllMembers()메소드에서는 비즈니스 계층과 퍼시스턴스 계층을 통하면서 필요한 데이터를 가져옴

	3) 뷰 리졸버는 템플릿 엔진을 사용해 HTML 문서를 만들거나 JSON, XML 등의 데이터를 생성

	4) 결과	==	members를 return 하고 그 데이터를 포스트맨에서 볼 수 있게 됨


** 핵심 요약

	1) 프레젠테이션 계층은 HTTP 요청을 받고 비즈니스 계층으로 전송

	2) 비즈니스 계층은 모든 비즈니스 로직을 처리함.
		퍼시스턴스 계층에서 제공하는 서비스를 사용할 수도 있고,
			권한을 부여하거나 유효성 검사를 하기도 함

	3) 퍼시스턴스 계층은 모든 스토리지 관련 로직을 처리함
		이 과정에서 데이터베이스에 접근하기 위한 객체인 DAO를 사용할 수도 있음

	