1.1 서버와 클라이언트

인터넷 서비스 == 클라이언트와 관계를 맺음


	클라이언트(웹 브라우저)			서버(스프링 부트)
	(서버에 다양한 요청)	=======>	(클라이언트가 요청한 내용 처리)

** 클라이언트란?

	클라이언트는 서버로 요청하는 프로그램을 모두 얼컬어 말함.
	우리가 사용하는 웹 브라우저 == 대표적인 클라이언트
	
	웹 브라우저로 하는 것은??

		주소를 입력하고 화면을 확인
		이때 주소를 입력한 뒤 enter 를 눌러 정보를 "요청" 하는 행위 == 서버에 요청한다

		서버 == 그 주소에 맞는 화면으로 "응답"

** 서버란?

	클라이언트의 단짝
	
	서버는 클라이언트의 "요청" 을 받아 처리하는 주체
	클라이언트가 데이터를 "요청" 했다면 해당 요청만 처리할 수 도 있음
	
	웹 브라우저에 주소를 입력	==	'새로운 화면을 그리기 위한 데이터를 달라' 는 데이터 요청에 해당


1.2 데이터베이스

	여러 사람이 데이터를 한 군데 모아놓고 여러 사람이 사용할 목적으로 관리하는 데이터 저장소
	
	MySQL, 오라클, 포스트그레SQL	==	데이터베이스 관리 시스템(DBMS	DataBase Management System)

	데이터베이스와 데이터베이스 관리 시스템은 한 쌍으로 움직임	==	 둘을 하나로 언급 할 뿐

** 데이터베이스의 동작 원리

			요청(SQL)->		관리->
	클라이언트			DBMS		데이터베이스
			<-응답(DATA)		<-관리

	클라이언트에서 SQL. 즉 데이터베이스를 조작하기 위한 언어로.

	'데이터베이스 관리 시스템' 에 데이터를 "요청"하면
	'데이터베이스 관리 시스템' 은 데이터베이스에서 데이터를 꺼내 "응답"


** RDB 란?

	데이터베이스는 여러가지로 구분

	RDB, NoSQL, NewSQL 등 여러 종류가 있음

	그 중 가장 많이 사용 == RDB (Relational DataBase) 관계형 데이터베이스

	RDB가 아닌 데이터베이스	==	 NoSQL, NewSQL로 구분

	관계형 데이터베이스	==	행(row) 과 열(column)로 이루어진 테이블로 관리

	기본키 (primary key) 를 사용해 각 행을 식별함

	각 테이블 간에 관계를 지을 수 있음

	RDB에서 가장 유명한 데이터베이스	==	오라클, MySQL, SQL 서버, 포스트그레SQL

** SQL 이란?

	SQL은 Structured Query Language

	쿼리, 데이터 검색을 하는 언어

	SQL	==	ANSI 표준 SQL , 

	각 RDB별로 방언이 있음
	
	SQL	==	데이터 질의를 위한 언어 (RDB 전용이라고 보기는 힘듦)

	NoSQL 에도 SQL 엔진을 도입해서 데이터를 조금이라도 더 편하게 질의하도록 지원하는 경우가 많음

** NoSQL 이란?

	SQL을 안 쓴다는 의미로 사용

	Not Only SQL 의 의미로 많이 사용

	RDB는 데이터 저장, 질의, 수정, 삭제가 용이

	하지만, 성능을 올리는게 쉽지 않음

	WHY?
	
	데이터베이스의 성능을 높이려면? 

	머신의 성능을 좋게 하는 "스케일 업" OR 
	머신을 여러대로 분리하는 "스케일 아웃" 이 필요

	스케일 업은 장비를 업그레이드하면 되지만
	스케일 아웃은 데이터베이스 분산이 필요함

	만약, 트랜잭션을 사용하면 성능이 떨어지게 됨.

	RDB의 문제점을 해결하기 위해 NoSQL이 등장.

	NoSQL은 데이터 모델링을 어떻게 하느냐에 따라서

	다이나모나비, 카우치베이스, 몽고디비와 같은 다양한 NoSQL 데이터베이스 들이 있음

1.3 아이피와 포트

	IP는 인터넷에서 컴퓨터 또는 기기들이 서로를 식별하고 통신하기 위한 주소
	(인터넷에서 기기들이 서로 식별, 통신하기 위한 주소)

	but,

	서버를 이용하려면 IP만 알아서는 안됨

	그럼? 

	"포트" 까지 알아야함

	IP 가 서버를 찾기위한 번호라면,
	포트 는 그 서버에서 운용되고 있는 서비스를 구분하기 위한 번호

	아이피 (백화점) 	
	포트 (각자 다른 물건을 살 수 있는 매장) 

	우리가 흔히 사용하는 웹 브라우저의 주소	==	아이피 + 포트

	EX)	www.naver.com 같은 주소는 아이피를 쉽게 알아보기 위해 이름표를 붙인 것

		https:// 는 서버의 443번 포트를 사용하기 위한 입력

		스프링 부트	==	8080 포트를 사용


1.4 라이브러리와 프레임워크

	백엔드 개발에 필요한 모든 코드를 온전히 혼자서 개발하려면 엄청난 시간이 필요

	그래서 현업에서는 다른 사람(단체) 가 만든 라이브러리와 프레임워크를 가져와 사용하게 됨

**라이브러리 란??

	
	         로그 라이브러리			==>	개발자	(라이브러리에서 제공하는 기능을 이용해 
								로그를 쉽게 만들 수 있고,
(로그 생성 기능, 로그 포매팅 기능, 로그 레벨 설정 기능)			커스텀하여 사용 할 수 있음

	라이브러리는 애플리케이션 개발에 필요한 기능인 "클래스", "함수" 등을 모아놓은 코드의 모음

	라이브러리	==	도서관 이라는 의미보다는 책들의 모음이라고 이해하기

	(개발자가 소프트웨어를 만들 때 필요에 따라 원하는 기능을 구현하기 위해 
				코드의 모음을 가져다 쓸 수 있는 일종의 도구 역할)
	

	EX) 로그 생성 기능, 로그 포매팅을 다양하게 지원하는 기능, 로그 레벨을 설정할 수 있는 기능들이
	     구현되어 있는 로그 라이브러리가 있으면

	     개발자는 이런 기능이 묶여 있는 로그 라이브러리를 의존성에 추가하기만 하면 됨.

	     그러면 라이브러리에서 제공하는 기능등을 직접 구현하지 않고도 프로젝트에서 사용할 수 있음

	     따라서, 개발자는 복잡한 코드를 직접 작성하지 않아도 되므로
	     원하는 기능을 더 빠르게 개발할 수 있음
                 
	     "라이브러리는 독립적이므로 라이브러리끼리 영향을 크게 주지 않음"

**프레임 워크란??

	소프트웨어 개발을 수월하게 하기 위한 소프트웨어 개발 환경

	프레임 워크	==	틀 (Frame) 과 일하다 (Work)의 합성어

	일하기 위한 틀을 제공하는 것

	단점은?

	정해진 틀에서 개발해야 한다는 단점이 있지만
	개발 효율은 굉장히 높다는 장점이 있음


	라이브러리와 프레임워크는 개발자가 소프트웨어를 개발하기 위해 사용하는 도구이지만
	사용 목적에 따라 차이가 있음

	** 프레임 워크	애플리케이션을 개발할 때 전체적인 구조를 잡기 위해 사용하는 것,

	** 라이브러리	개발을 하는 과정에서 필요한 기능을 구현하기 위해 사용하는 것


1.5 백엔드 개발자의 업무

	백엔드 개발자는 어떤 일을 할까?

	백엔드 개발자의 주된 업무는?
	서버 측 애플리케이션을 개발하는 일

	개발하면서 서버에 대한 지식과 프로그래밍 지식, 
	만든 프로그램을 배포하고 안전하게 서비스할 수 있게 하는 지식을 활용

	1) 과제 할당
	2) 과제 분석
	3) 개발
	4) 테스트(리뷰)
	5) QA 및 버그 수정
	6) 배포
	7) 유지보수

	1) 과제 할당
	
		모든 일은 주어진 과제를 할당하며 시작

		사업부, 마케팅, 개발팀 등에서 개발 과제를 할당
		
		개발자가 그 과제를 분석하기 시작!

	2) 과제 분석

		예를들어, 어떤 소셜 서비스에서 '친구 초대 이벤트를 만들어주세요' 라는 과제가 주어짐

		이 때 '친구'는 무엇인지, '초대'는 무엇을 의미하는지, '이벤트' 는 어떤 조건이 필요하고

		초대를 한 친구와 초대된 친구에게 보상을 어떻게 줄지, 

		이벤트를 위해서 어떤 데이터들을 저장하는지를 결정해야함

		제공할 성능과 사용할 기술을 검토하고, 문제가 있다면 해결 방법도 면밀하게 분석하고 정리
		
		서비스는 복잡하므로 작은 기능에서 발생하는 문제 하나가 서비스 전체의 문제로 이어질 수 있음

		그래서 이 과정이 매우 중요함.

	3) 개발

		과제 검토가 끝났으니 개발을 진행

		개발 과정에서는 기능을 개발하고,

		버그를 수정하는 일이 대부분

		깃허브를 통해 리뷰를 받고 리뷰에 대한 내용을 반ㅇ여해서 코드의 완성도를 높임

	4) 테스트

		개발을 마치면 코드가 제대로 동작하는지 테스트를 해야 함.

		언급한 과제 분석 -> 개발 -> 테스트 를 반복하며 프로그램의 완성도를 높여감

		테스트는 단순히 실행이 잘 되는지만 보는게 아님

		로직상 문제는 없는지, 성능 한계는 어느 정도인지, 만든 코드가 읽기 편한지,
		
		내가 만든 클래스, 메소드, 함수를 다른 사람이 간편하게 사용할 수 있는지 등을 검토하면서 테스트를 함

		조직이나 개발자에 따라 단위 테스트를 작성하는 경우도 있음

	
	5) QA
		개발과 테스트가 어느 정도 마무리가 되면 애플리케이션의 품질을 높이기 위해

		QA (quality assurance)를 신청함

		QA팀이 없다면 개발 조직에서 담당

	6) 배포와 유지보수

		QA가 완료되면 서버에 배포를 진행.
		
		때에 따라서 여러 과제를 한 번에 병합해서 배포하ㅓ나

		새로운 기능이 추가될 때 마다 배포

		애플리케이션을 쉽고 안전하게 배포하고,

		문제 발생시 쉽게 이전 버전으로 돌리는 작업을 할 수 있도록 준비해야함.

		배포 방법(여러 가지)

		1) 특정 개수의 서버들을 돌아가며 배포 (롤링 배포)
		2) 똑같은 서버 인스턴스를 띄우고 로드 밸런서 설정을 바꿈 (블루 그린 배포)
		3) 전체 서버의 특정 비율만큼 배포해보고 문제없는 경우 점점 배포를 늘려나감 (카나리 배포)

		개발자는 코드의 개발부터 테스트, 배포 ,모니터링까지 사실상 무한 반복

		빌드부터, 배포까지의 과정을 자동화 할 수 있음
		(CI, Continous Integration)
		(CD, Continous Delivery & Continous Deployment)

		CI	==	지속적인 통합
		(새로운 코드 변경 사항이 정기적으로 빌드 및 테스트되어 저장소에 통합되는 것)
		
		CD	==	지속적인 배포
		(CI는 저장소에 코드가 반영되는 것, CD는 실제 프로덕션 환경까지 변경된 코드가 반영되는 것)

1.6 백엔드 프로그래밍 언어

	언어의 인기 순위를 매기는 지수	==	TIOBE 인덱스
	
	파이썬	==	데이터 분야에서 많이 사용하지만 서버 개발에도 많이 사용함
		대표적인 프레임워크	==	플라스크, 장고 FastAPI

	C++	==	성능이 중요한 게임 서버 개발에서 많이 사용

	자바	==	스프링, 스프링 부트라는 매우 강력한 프레임워크를 기반으로
			많은 곳에서 서버 개발에 사용함

	C#	==	국내보다는 미국에서 많이 사용
		닷넷 프레임워크가 매우 강력함.
		마이크로소프트 계열의 소프트웨어와 호환성이 좋은 편
		개발자들이 자주 찾는 사이트 중 하나인 스택오버플로가 C#을 기반으로 만들어짐

	자바스크립트	==	프론트엔드 뿐만 아니라 백엔드에서도 많이 사용
				대표적인 웹 프레임워크는 Express. NestJS
	
1.7 자바 어노테이션

	자바로 작성한 코드에 추가하는 표식
	
	보통 어노테이션은 @ 기호를 사용	(JDK 1.5 버전부터 사용 가능)
	
	어노테이션의 사용 목적은?
	
		보통은 메타 데이터로 사용하는 경우가 가장 많음

		EX) @Override	선언된 메소드가 오버라이드 됨
		     @Dprecated	더 이상 사용되지 않음
		     @SuppressWarning	컴파일 경고를 무시함

	@Override 	==	메소드를 재정의함을 의미

	메소드를 재정의하면 부모 클래스의 메소드를 자식 클래스에서 다시 구현함.
	@Override 어노테이션을 붙임으로써 다시 구현한 메소드임을 명시적으로 나타냄

	