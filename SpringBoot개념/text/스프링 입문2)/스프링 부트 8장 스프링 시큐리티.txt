8장 

8.1 사전 지식: 스프링 시큐리티

스프링 시큐리티는 스프링 기반의 애플리케이션 보안(인증,인가,권한)을 담당하는 스프링 하위 프레임워크


** 인증과 인가

인증(authentication)
	사용자의 신원을 입증하는 과정
	
	ex) 사용자가 사이트에 로그인을 할 때 누구인지 확인하는 과정을 인증이라고 함

인가(authorization)
	사이트의 특정 부분에 접근할 수 있는지 권한을 확인하는 작업

	ex) 관리자는 관리자 페이지에 들어갈 수 있지만 
		일반 사용자는 관리자 페이지에 들어갈 수 없음

		이런 권한을 확인하는 과정을 인가라고 함

** 스프링 시큐리티
	스프링 긱반 애플리케이션의 보안을 담당(스프링 하위 프레임워크)
	보안 관련 옵션을 제공

	CSRF 공격, 세션 고정(Session fixation) 공격을 방어해줌

	요청 헤더도 보안 처리를 해주므로 개발자가 보안 관련 개발을 해야 하는 부담을 크게 줄여줌

** CSRF 공격
	사용자의 권한을 가지고 특정 동작을 수행하도록 유도하는 공격

** 세션 공격
	사용자의 인증 정보를 탈취하거나 변조하는 공격

** 필터 기반으로 동작하는 스프링 시큐리티
	
	스프링 시큐리티의 필터 구조를 살펴보기
	어떤 필터가 동작하는지 확인하기

	각 필터에서 각 인증, 인가와 관련된 작업을 처리

	특정 필터를 제겋하거나 필터 뒤에 커스텀 필터를 넣는 등의 설정도 가능

	UsernamePasswordAuthenticationFilter
		아이디와 패스워드가 넘어오면 인증 요청을 위임하는 인증 관리자 역할

	FilterSecurityInterceptor
		권한 부여 처리를 위임해 접근 제어 결정을 쉽게 하는 접근 결정 관리자 역할

	
***** 아이디와 패스워드 기반 폼 로그인을 시도하면 스프링 시큐리티에서는 어떤 절차로 인증 처리를 하는지 확인

	1) 사용자가 폼에 아이디와 패스웓드를 입력하면 
		HTTPServletRequest에 아이디와 비밀번호 정보가 전달됨

		이때 AuthenticationFilter가 넘어온 아이디와 비밀번호의 유효성 검사를 함
			(인증 필터)
	2) 유효성 검사가 끝나면 실제 구현체인 UsernamePasswordAuthenticationToken을 만들어 넘겨줌
						(인증 토큰)
	3) 전달받은 인증용 객체인 UsernamePasswordAuthenticaionToken 을 AuthenticaionManager 에게 보냄
						(인증 토큰)		(인증 매니저)
	4) UsernamePasswordAuthenticaionToken을 AuthenticaionProvider에 보냄
			(인증 토큰)		(인증 제공자)

	5) 사용자 아이디를 UserDetailService에 보냄
			ㄴ(사용자 세부 정보를 가져온느 데 사용되는 인터페이스)
		UserDetailService는 사용자 아이디로  찾은 사용자의 정보를 UserDetails 객체로 만들어
								  ㄴ(사용자 세부 정보를 나타내는 인터페이스)
			AuthenticationProvider에게 전달
			(인증 제공자)
	6) DB에 있는 사용자 정보를 가져옴

	7) 입력 정보와 UserDetails의 정보를 비교해 실제 인증 처리를 함

	8) AuthenticationProvider -> AuthenticationManager
		(인증 제공자)		(인증 매니저)
	9) AuthenticationManager -> AuthenticationFilter
		(인증 매니저)		(인증 필터)
	10) AuthenticationFilter -> SecurityContextHolder
		(인증 필터)		(사용자의 보안 컨텍스트를 제공하는 클래스)
	11) 8~10 까지 인증이 완료되면 SecurityContextHolder에 Authentication을 저장함 
	
		인증 성공 여부에 따라
			성공하면 AuthenticaionSuccessHandler
								핸들러를 실행
			실패하면 AuthenticaionFailureHandler



8.2 회원 도메인 만들기

	인증, 인가 기능 구현
		1) 회원 정보를 저장할 테이블 생성
		2) 테이블과 연결할 도메인 생성
		3) 테이블과 연결할 회원 엔티티 만들기
		4) 회원 엔티티와 연결되어 데이터를 조회하게 해줄 리포지토리 생성
		5) 스프링 시큐리티에서 사용자 정보를 가져오는 서비스 만들기


-------- 의존성 추가

//    스프링 시큐리티를 사용하기 위한 스타터 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'
//    타임리프에서 스프링 시큐리티를 사용하기 위한 의존성 추가
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
//    스프링 시큐리티를 테스트하기 위한 의존성 추가
    testImplementation 'org.springframework.security:spring-security-test'


---------- 엔티티 만들기

package me.hackerj.springbootdeveloper.domain;

import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

//import static jdk.internal.org.jline.reader.impl.LineReaderImpl.CompletionType.List;

@Table(name = "users")
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@Getter
@Entity
public class User implements UserDetails {
//    UserDetails를 상속박아 인증 객체로 사용
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", updatable = false)
    private Long id;

    @Column(name = "email", nullable = false, unique = true)
    private String email;

    @Column(name = "password")
    private String password;

    @Builder
    public User(String email, String password, String auth) {
        this.email = email;
        this.password = password;
    }
    @Override   // 권한 반환
    /*
        getAuthorities()  반환타입  Collection<? extends GrantedAuthority>
        사용자가 가지고 있는 권한의 목록을 반환
        지금은 사용자 이외의 권한이 없기 때문에 user 권한만 담아 반환
     */
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority("user"));
    }
    // 사용자의 id를 반환(고유한 값)
    @Override
    /*
       getUsername()    반환타입    String
       사용자를 식별할 수 있는 사용자 이름을 반환
       이때 사용되는 사용자 이름은 반드시 고유해야함.
       여기서는 유니크 속성이 적용된 이메일을 반환함
    */
    public String getUsername() {
        return email;
    }
    // 사용자의 password 반환
    @Override
    /*
        getPassword()   반환타입    String
        사용자의 비밀번호를 반환
        이때 저장되어 있는 비밀번호는 암호화해서 저장해야함
    */
    public String getPassword() {
        return password;
    }
    // 계정 만료 여부 반환
    @Override
    /*
        isAccountNonExpired()   반환타입    Boolean
        계정이 만료되었는지 확인하는 메소드
        만약 만료되지 않은 때는 true 를 반환
    */
    public boolean isAccountNonExpired() {
        // 만료되었는지 확인하는 로직
        return true;    // true => 만료되지 않았음
    }
    // 계정 잠금 여부 반환
    @Override
    /*
        isAccountNonLocked()    반환타입    Boolean
        계정이 잠금되었는지 확인하는 메소드
        만약 잠금되지 않은 때는 true 를 반환
    */
    public boolean isAccountNonLocked() {
        // 계정 잠금되었는지 확인하는 로직
        return true;    //true => 잠금되지 않았음
    }

    // 패스워드의 만료 여부 반환
    @Override
    /*
        isCredentialsNonExpired()    반환타입    Boolean
        비밀번호가 만료되었는지 확인하는 메소드
        만약 만료되지 않은 때는 true 를 반환
    */
    public boolean isCredentialsNonExpired() {
        // 패스워드가 만료되었는지 확인하는 로직
        return true;   //true => 만료되지 않았음
    }

    // 계정 사용 가능 여부 반환
    @Override
    /*
        isEnabled() 반환타입    Boolean
        계정이 사용 가능한지 확인하는 메소드
        만약 사용가능하다면 true 를 반환
    */
    public boolean isEnabled() {
        // 계정이 사용 가능한지 확인하는 로직
        return true;   // true => 사용 가능
    }
}
/*
    User 클래스가 상속한 UserDetails 클래스는 스프링 시큐리티에서
    사용자의 인증 정보를 담아두는 인터페이스

    스프링 시큐리티에서 해당 객체를 통해 인증 정보를 가져오려면 필수 오버라이드 메소드들을
    여러 개 사용해야 함
*/

---------- 리포지토리 만들기

package me.hackerj.springbootdeveloper.repository;

import me.hackerj.springbootdeveloper.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
    //1) email로 사용자 정보를 가져옴
}
/*
    이메일로 사용자 정보를 식별 할 수 있음
    즉, 사용자 이름으로 봐도 무관함
    사용자 정보를 가져오기 위해서는 스프링 시큐리티가 이메일을 전달받아야 함

    스프링 데이터 JPA 는 메소드 규칙에 맞춰 메소드를 선언하면 이름을 분석해 자동으로 쿼리를 생성해줌

    findByEmail() 메소드는 실제 데이터베이스에 회원 정보를 요청할 때

    FROM Users
    WHERE email = #{email}

	쿼리를 실행함
*/


**** 자주 사용하는 쿼리 메소드의 명명 규칙

     코드			설명				 			쿼리

findByName()		"name" 컬럼의 값 중 파라미터로 들어오는 값과 같은 데이터 반환	...WHERE name = ?1

findByNameAndAge()	파라미터로 들어오는 값 중 첫 번째 값은 "name" 컬럼에서 조회하고	...WHERE name = ?1 AND age = ?2
			두 번째 값은 "age" 컬럼에서 조회한 데이터 반환

findByNameOrAge()	파라미터로 들어오는 값 중 첫 번째 값이 "name" 컬럼에서 조회되거나 ...WHERE name = ?1 OR age = ?2
			두 번째 값이 "age" 에서 조회되는 데이터 반환		

findByAgeLessThan()	"age" 컬럼의 값 중 파라미터로 들어온 값보다 작은 데이터 반환	 ...WHERE age < ?1

findByAgeGreaterThan()	"age" 컬럼의 값 중 파라미터로 들어온 값보다 큰 데이터 반환	 ...WHERE age > ?1

findByName(Is)Null()	"name" 컬럼의 값 중 null 인 데이터 반환			 ...WHERE name IS NULL


(엔티티와 리포지토리가 완성되었으니 스프링 시큐리티에서 로그인을 진행할 때 사용자 정보를 가져오는 코드 작성)
---------- Service

package me.hackerj.springbootdeveloper.service;

import lombok.RequiredArgsConstructor;
import me.hackerj.springbootdeveloper.domain.User;
import me.hackerj.springbootdeveloper.repository.UserRepository;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Service;

@RequiredArgsConstructor
@Service
// 스프링 시큐리티에서 사용자 정보를 가져오는 인터페이스
public class UserDetailService implements UserDetailsService {
    
    private final UserRepository userRepository;
    
    // 사용자 이름(email)으로 사용자의 정보를 가져오는 메소드
    @Override
    public User loadUserByUsername(String email) {
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new IllegalArgumentException((email)));
    }
}
/*
    스프링 시큐리티에서 사용자의 정보를 가져오는 UserDetailsService 인터페이스를 구현
    필수로 구현해야 하는 loadUserByUsername() 메소드를 오버라이딩해서
    사용자 정보를 가져오는 로직을 작성
*/

8.3 시큐리티 설정하기

	인증을 위한 도메인과 리포지토리, 서비스가 완성
	실제 인증 처리를 하는 시큐리티 설정 파일 WebSecurityConfig.java 작성
	(같은 패키지 내에 config 패키지를 새로 만들어 생성)

package me.hackerj.springbootdeveloper.config;

import lombok.RequiredArgsConstructor;
import me.hackerj.springbootdeveloper.service.UserDetailService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import static org.springframework.boot.autoconfigure.security.servlet.PathRequest.toH2Console;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class WebSecurityConfig {

    private final UserDetailService userService;

    // 1) 스프링 시큐리티 기능 비활성화
    @Bean
    public WebSecurityCustomizer configure() {
        return (web) -> web.ignoring()
                .requestMatchers(toH2Console())
                .requestMatchers(new AntPathRequestMatcher("/static/**"));
    }
    // 2) 특정 HTTP 요청에 대한 웹 기반 보안 구성
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
                .authorizeRequests(auth -> auth // 3) 인증 , 인가 설정
                        .requestMatchers(
                                new AntPathRequestMatcher("/login"),
                                new AntPathRequestMatcher("/signup"),
                                new AntPathRequestMatcher("/user")
                        ).permitAll()   //접근 허용
                        .anyRequest().authenticated())  // 허용되지 않은 모든 요청에 인증
                .formLogin(formLogin -> formLogin   // 4) 폼 기반 로그인 설정
                        .loginPage("/login")
                        .defaultSuccessUrl("/articles")
                )
                .logout(logout -> logout        // 5) 로그아웃 설정
                        .logoutSuccessUrl("/login")
                        .invalidateHttpSession(true)
                )
                .csrf(AbstractHttpConfigurer::disable)  // 6) csrf 비활성화
                .build();
    }
    //7) 인증 관리자 관련 설정
    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http,
  BCryptPasswordEncoder bCryptPasswordEncoder, UserDetailService userDetailService)
    throws Exception {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userService);    //8) 사용자 정보 서비스 설정
        authProvider.setPasswordEncoder(bCryptPasswordEncoder);
        return new ProviderManager(authProvider);
    }
    // 9) 패스워드 인코더로 사용할 빈 등록
    @Bean
    public BCryptPasswordEncoder bCryptPasswordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
/*
    1) 스프링 시큐리티의 모든 기능을 사용하지 않게 설정하는 코드
        즉, 인증, 인가 서비스를 모든 곳에 적용하지는 않음
           일반적으로 정적 리소스(이미지, HTML파일) 에 설정
           정적 리소스만 스프링 시큐리티 사용을 비활성화 하는데 
           static 하위 경로에 있는 리소스와 h2의 데이터를 확인하는 데 사용하는 h2-console 하위
           url을 대상으로 ignoring() 메소드를 사용
     
    2) 특정 HTTP 요청에 대해 웹 기반 보안을 구성함
        이 메소드에서 인증/인가 및 로그인, 로그아웃 관련 설정을 할 수 있음
        
    3) 특정 경로에 대한 엑세스 설정을 함
    RequestMatchers() : 특정 요청과 일치하는 url에 대한 액세스를 설정
    permitAll() : 누구나 접근이 가능하게 설정
                    즉, "/login", "/signup", "/user"로 요청이 오면
                        인증/인가 없이도 접근할 수 있음
    anyRequest() : 위에서 설정한 url 이외의 요청에 대해서 설정
    authenticated() : 별도의 인가는 필요하지 않지만 인증이 성공된 상태여야 접근 할 수 있음
    
    4) 폼 기반 로그인 설정 
    loginPage() : 로그인 페이지 경로를 설정
    defaultSuccessUrl() : 로그인이 완료되었을 때 이동할 경로를 설정
    
    5) 로그아웃 설정 
    logoutSuccessUrl() : 로그아웃이 완료되었을때 이동할 경롤르 설정
    invalidateHttpSession() : 로그아웃 이후에 세션을 전체 삭제할지 여부를 설정
    
    6) CSRF 설정을 비활성화
        CSRF 공격을 방지하기 위해서는 활성화하는 게 좋지만 실습을 편리하게 하기 위해 비활성화
    
    7) 인증 관리자 관련 설정 
        사용자 정보를 가져올 서비스를 재정의하거나, 인증 방법, 예를 들어 
            LDAP, JDBC 기반 인증 등을 설정할 때 사용
            
    8) 사용자 서비스를 설정
    UserDetailsService() : 사용자 정보를 가져올 서비스를 설정
                            이때 설정하는 서비스 클래스는 반드시
                              UserDetailsService를 상속받은 클래스여야 함
    passwordEncoder() : 비밀번호를 암호화하기 위한 인코더를 설정
    
    9) 패스워드 인코더를 빈으로 등록함
    
*/

8.4 회원 가입 구현하기
	시큐리티 설정이 완료 -> 회원 가입을 구현
	(회원 정보를 추가하는 서비스 메소드를 작성 -> 회원 가입 컨트롤러를 구현)

** 서비스 메소드 코드 작성하기

01단계) 사용자 정보를 담고 있느 객체를 작성 (dto AddUserRequest.java)

package me.hackerj.springbootdeveloper.service;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AddUserRequest {
    private String email;
    private String password;

}

02단계) AddUserRequest 객체를 인수로 받는 회원 정보 추가 메소드를 작성
	(service 디렉토리 UserService.java)

package me.hackerj.springbootdeveloper.service;

import lombok.RequiredArgsConstructor;
import me.hackerj.springbootdeveloper.domain.User;
import me.hackerj.springbootdeveloper.repository.UserRepository;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@RequiredArgsConstructor
@Service
public class UserService {
    private final UserRepository userRepository;
    private final BCryptPasswordEncoder bCryptPasswordEncoder;
    
    public Long save(AddUserRequest dto) {
        return userRepository.save(User.builder()
                .email(dto.getEmail())
                // 1) 패스워드 암호화
                .password(bCryptPasswordEncoder.encode(dto.getPassword()))
                .build()).getId();
    }
}
/*
    1) 패스워드를 저장할 때 시큐리티를 설정하며 패스워드 인코딩용으로 등록한 
        빈을 사용해서 암호화한 후에 저장함
*/


*** 컨트롤러 작성하기
	회원 가입 폼에서 회원 가입 요청을 받으면 서비스 메소드를 사용해 사용자를 저장한 뒤,
	로그인 페이지로 이동하는 signup() 메소드 작성

01 단계)	controller 디렉토리 UserApiController.java

package me.hackerj.springbootdeveloper.controller;

import lombok.RequiredArgsConstructor;
import me.hackerj.springbootdeveloper.service.AddUserRequest;
import me.hackerj.springbootdeveloper.service.UserService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;

@RequiredArgsConstructor
@Controller
public class UserApiController {
    private final UserService userService;

    @PostMapping("/user")
    public String signup(AddUserRequest request) {
        userService.save(request);
        return "redirect:/login";
    }
}
/*
    회원 가입 처리가 된 다음 로그인 페이지로 이동하기 위해 redirect: 접두사를 붙임
    회원 가입 처리가 끝나면 강제로 /login URL 에 해당하는 화면으로 이동
*/

8.5 회원 가입, 로그인 뷰 작성하기

	회원 가입과 로그인 코드를 모두 작성 -> 
	사용자가 회원 가입, 로그인 경로에 접근하면 회원 가입, 로그인 화면으로 연결해주는 컨트롤러 생성
 	(사용자가 실제로 볼 수 있는 화면 작성)

package me.hackerj.springbootdeveloper.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class UserViewController {
    @GetMapping("/login")
    public String login(){
        return "login";
    }
    @GetMapping("/signup")
    public String signup(){
        return "signup";
    }
}
/*
    /login 경로로 접근하면 login() 메소드가 login.html 을,
    /signup 경로에 접근하면 signup() 메소드가 signup.html 을 반환
*/

*** 뷰 작성하기

 01단계)	templates 디렉토리 -> login.html

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>로그인</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css">

  <style>
    .gradient-custom {
      background: linear-gradient(to right, rgba(106, 17, 203, 1), rgba(37, 117, 252, 1))
    }
  </style>
</head>
<body class="gradient-custom">
<section class="d-flex vh-100">
  <div class="container-fluid row justify-content-center align-content-center">
    <div class="card bg-dark" style="border-radius: 1rem;">
      <div class="card-body p-5 text-center">
        <h2 class="text-white">LOGIN</h2>
        <p class="text-white-50 mt-2 mb-5">서비스를 사용하려면 로그인을 해주세요!</p>

        <div class = "mb-2">
          <form action="/login" method="POST">
            <input type="hidden" th:name="${_csrf?.parameterName}" th:value="${_csrf?.token}" />
            <div class="mb-3">
              <label class="form-label text-white">Email address</label>
              <input type="email" class="form-control" name="username">
            </div>
            <div class="mb-3">
              <label class="form-label text-white">Password</label>
              <input type="password" class="form-control" name="password">
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>

          <button type="button" class="btn btn-secondary mt-3" onclick="location.href='/signup'">회원가입</button>
        </div>
      </div>
    </div>
  </div>
</section>
</body>
</html>


02단계) 회원 가입 뷰를 작성 templates 디렉토리 -> signup.html

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>회원 가입</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css">

    <style>
        .gradient-custom {
            background: linear-gradient(to right, rgba(254, 238, 229, 1), rgba(229, 193, 197, 1))
        }
    </style>
</head>
<body class="gradient-custom">
<section class="d-flex vh-100">
    <div class="container-fluid row justify-content-center align-content-center">
        <div class="card bg-dark" style="border-radius: 1rem;">
            <div class="card-body p-5 text-center">
                <h2 class="text-white">SIGN UP</h2>
                <p class="text-white-50 mt-2 mb-5">서비스 사용을 위한 회원 가입</p>

                <div class = "mb-2">
                    <form th:action="@{/user}" method="POST">
                        <!-- 토큰을 추가하여 CSRF 공격 방지 -->
                        <input type="hidden" th:name="${_csrf?.parameterName}" th:value="${_csrf?.token}" />
                        <div class="mb-3">
                            <label class="form-label text-white">Email address</label>
                            <input type="email" class="form-control" name="email">
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-white">Password</label>
                            <input type="password" class="form-control" name="password">
                        </div>

                        <button type="submit" class="btn btn-primary">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
</body>
</html>


8.6 로그아웃 구현하기

	로그아웃 기능을 구현

** 로그아웃 메소드 추가하기

01 단계) UserApiController.java 파일 수정
	( logout() 메소드 추가)

package me.hackerj.springbootdeveloper.controller;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import me.hackerj.springbootdeveloper.service.AddUserRequest;
import me.hackerj.springbootdeveloper.service.UserService;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

@RequiredArgsConstructor
@Controller
public class UserApiController {
    private final UserService userService;

    @PostMapping("/user")
    public String signup(AddUserRequest request) {
        userService.save(request);
        return "redirect:/login";
    }
/*
    회원 가입 처리가 된 다음 로그인 페이지로 이동하기 위해 redirect: 접두사를 붙임
    회원 가입 처리가 끝나면 강제로 /login URL 에 해당하는 화면으로 이동
*/

    @GetMapping("/logout")
    public String logout(HttpServletRequest request, HttpServletResponse response) {
        new SecurityContextLogoutHandler().logout(request, response,
                SecurityContextHolder.getContext().getAuthentication());
        return "redirect:/login";
    }
/*
    /logout GET 요청을 하면 로그아웃을 담당하는 핸들러인
        SecurityContextLogoutHandler의 logout() 메소드를 호출해서 로그아웃
*/

}


*** 로그아웃 뷰 추가하기

01단계)	로그아웃을 위한 뷰 작성
		블로그 글 목록 뷰 파일 articleList.html에 [로그아웃] 버튼 추가

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>블로그 글 목록</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
</head>
<body>
<div class="p-5 mb-5 text-center</> bg-light">
    <h1 class="mb-3">My Blog</h1>
    <h4 class="mb-3">블로그에 오신 것을 환영합니다.</h4>
</div>

<div class="container">
    <button type="button" id="create-btn"
            th:onclick="|location.href='@{/new-article}'|"
            class="btn btn-secondary btn-sm mb-3">글 등록</button>
    <div class="row-6" th:each="item : ${articles}">
        <div class="card">
            <div class="card-header" th:text="${item.id}">
            </div>
            <div class="card-body">
                <h5 class="card-title" th:text="${item.title}"></h5>
                <p class="card-text" th:text="${item.content}"></p>
                <a th:href="@{/articles/{id}(id=${item.id})}" class="btn btn-primary">보러가기</a>
            </div>
        </div>
        <br>
    </div>

    <button type="button" class="btn btn-secondary" onclick="location.href='/logout'">로그아웃</button>
</div>

<script src="/js/article.js"></script>
</body>
<!--
    1) th:each 로 "article" 키에 담긴 데이터 개수만큼 반복
    2) th:text 는 반복 대상 객체의 id, "text"를 출력함
-->

